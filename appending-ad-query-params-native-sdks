<!DOCTYPE html>
<html  lang="en" dir="ltr">
  <head>
    <meta charset="utf-8" />
<script>(function(i,s,o,g,r,a,m){i["GoogleAnalyticsObject"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)})(window,document,"script","https://www.google-analytics.com/analytics.js","ga");ga("create", "UA-2728311-17", {"cookieDomain":"auto"});ga("set", "anonymizeIp", true);ga("send", "pageview");</script>
<meta name="Generator" content="Drupal 8 (https://www.drupal.org)" />
<meta name="MobileOptimized" content="width" />
<meta name="HandheldFriendly" content="true" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<link rel="shortcut icon" href="sites/default/files/favicon-64.png" type="image/png" />
<link rel="alternate" hreflang="en" href="appending-ad-query-params-native-sdks.html" />
<link rel="canonical" href="appending-ad-query-params-native-sdks.html" />
<link rel="shortlink" href="appending-ad-query-params-native-sdks.html" />
<link rel="revision" href="appending-ad-query-params-native-sdks.html" />

    <title>Appending Ad Query Params with the Native SDKs | Brightcove Learning</title>
    <link rel="stylesheet" media="all" href="sites/default/files/css/css_d7PoQ20hWbRiei75VgExP_tm8C1ylIRfzB3zIYLc5Cw_q23msc.css" />
<link rel="stylesheet" media="all" href="https://cdn.jsdelivr.net/npm/bootstrap@3.4.1/dist/css/bootstrap.min.css" />
<link rel="stylesheet" media="all" href="https://cdn.jsdelivr.net/npm/@unicorn-fail/drupal-bootstrap-styles@0.0.2/dist/3.4.0/8.x-3.x/drupal-bootstrap.min.css" />


    
<!--[if lte IE 8]>
<script src="/sites/default/files/js/js_VtafjXmRvoUgAzqzYTA3Wrjkx9wcWhjP0G4ZnnqRamA.js"></script>
<![endif]-->

    <meta name="uri-translation" content="on" />
    <script>
window['_fs_debug'] = false; window['_fs_host'] = 'fullstory.com';
window['_fs_org'] = 'BX3Q1';
window['_fs_namespace'] = 'FS';
(function(m,n,e,t,l,o,g,y){
if (e in m) {if(m.console && m.console.log) { m.console.log('FullStory namespace conflict. Please set window["_fs_namespace"].');} return;}
g=m[e]=function(a,b){g.q?g.q.push([a,b]):g._api(a,b);};g.q=[];
o=n.createElement(t);o.async=1;o.src='https://'+_fs_host+'/s/fs.js';
y=n.getElementsByTagName(t)[0];y.parentNode.insertBefore(o,y);
g.identify=function(i,v){g(l,{uid:i});if(v)g(l,v)};g.setUserVars=function(v){g(l,v)};
g.shutdown=function(){g("rec",!1)};g.restart=function(){g("rec",!0)};
g.consent=function(a){g("consent",!arguments.length||a)};
g.identifyAccount=function(i,v){o='account';v=v||{};v.acctId=i;g(o,v)};
g.clearUserCookie=function(){};
})(window,document,window['_fs_namespace'],'script','user');
    </script>
  </head>
  <body class="path-node page-node-type-support-doc has-glyphicons">


<section id="block-gtranslate" class="block block-gtranslate block-gtranslate-block clearfix">
  
    

      



  </section>


  </div>

      </div>
      

                    <div class="navbar-collapse collapse">
            <div class="region region-navigation-collapsible">
    

  </div>

        </div>
          </header>
  
    <div class="full-width-headline">
    <div class="container">
      <div class="row">
        <div class="col-sm-12" role="heading">
            <div class="region region-header">
          <section id="block-brightcoveheadlineblock" class="block block-bc-general block-bc-general-headline-block clearfix">
  
    

      Documentation
  </section>


  </div>

        </div>
      </div>
    </div>
  </div>
  
      <div role="main" class="main-container container  js-quickedit-main-content">
    <div class="row">

                              <aside class="col-sm-3" role="complementary">
              <div class="region region-sidebar-first">
    <section class="bc-search-fixes-search-block-form block block-bc-search-fixes block-bc-search-fixes-search-block clearfix" data-drupal-selector="bc-search-fixes-search-block-form" id="block-brightcovesearchblock">
  
    

      <form action="appending-ad-query-params-native-sdks.html" method="post" id="bc-search-fixes-search-block-form" accept-charset="UTF-8">
  <div class="form-item js-form-item form-type-textfield js-form-type-textfield form-item-search js-form-item-search form-no-label form-group">
      <label for="edit-search" class="control-label sr-only">Search</label>
  
  
  <input data-drupal-selector="edit-search" class="form-text form-control" type="text" id="edit-search" name="search" value="" size="15" maxlength="128" placeholder="Search" />

  
  
  </div>
<input autocomplete="off" data-drupal-selector="form-jhkzpzmuserdfff-vwewb2sdfnlbqd6joamhpywj0wc" type="hidden" name="form_build_id" value="form-jHkZpZmUSERDFFf_vWewb2SdFnlBqd6joAMhPyWJ0Wc" /><input data-drupal-selector="edit-bc-search-fixes-search-block-form" type="hidden" name="form_id" value="bc_search_fixes_search_block_form" /><div data-drupal-selector="edit-actions" class="form-actions form-group js-form-wrapper form-wrapper" id="edit-actions"><button data-drupal-selector="edit-submit" class="button js-form-submit form-submit btn-primary btn icon-only" type="submit" id="edit-submit" name="op" value="Search"><span class="sr-only">Search</span><span class="icon glyphicon glyphicon-search" aria-hidden="true"></span></button></div>

</form>

  </section>

<section id="block-inpagenavigationblock" class="hidden-xs block block-bc-ipnav block-bc-ipnav-block clearfix">
  
      <h2 class="block-title">On This Page</h2>
    

      <div class="bc-ipnav-block"></div>
  </section>


  </div>

          </aside>
              
                  <section class="col-sm-9">

                                      <div class="highlighted">  <div class="region region-highlighted">
    <div data-drupal-messages-fallback class="hidden"></div>

  </div>
</div>
                  
                
                
                
                          <a id="main-content"></a>
            <div class="region region-content">
        <h1 class="page-header"><span>Appending Ad Query Params with the Native SDKs</span>
</h1>

  
<div class="node node--type-support-doc node--view-mode-full bcdocs-four-rows clearfix">

  

  <div class="group-first-row">
      </div>

  <div class="group-second-row">
  
  <div class="field field--name-field-products field--type-entity-reference field--label-visually_hidden">
    <div class="field--label sr-only">Product(s)</div>
          <div class="field__items taxonomy__tags">
        <svg class="icon--product" viewBox="0 0 100 100">
          <use xlink:href="//support.brightcove.com/themes/custom/bcdocs/images/icons.svg#icon--product"></use>
        </svg>
              <div class="field--item">Video Cloud</div>
          <div class="field--item">Brightcove Player</div>
              </div>
      </div>

  <div class="field field--name-field-roles field--type-entity-reference field--label-visually_hidden">
    <div class="field--label sr-only">Role(s)</div>
          <div class="field__items taxonomy__tags">
        <svg class="icon--roles" viewBox="0 0 100 100">
          <use xlink:href="//support.brightcove.com/themes/custom/bcdocs/images/icons.svg#icon--roles"></use>
        </svg>
              <div class="field--item">Device SDK Developer</div>
              </div>
      </div>

</div>

  
<div class="group-third-row taxonomy__tags">
      <svg class="icon--label" viewBox="0 0 100 100">
      <use xlink:href="//support.brightcove.com/themes/custom/bcdocs/images/icons.svg#icon--label"></use>
    </svg>
    
  <div class="field field--name-field-tasks field--type-entity-reference field--label-visually_hidden">
    <div class="field--label sr-only">Task(s)</div>
          <div class="field--items">
              <div class="field--item">Develop with the Native SDKs</div>
              </div>
      </div>

  <div class="field field--name-field-topics field--type-entity-reference field--label-visually_hidden">
    <div class="field--label sr-only">Topic(s)</div>
          <div class="field--items">
              <div class="field--item">Advertising</div>
              </div>
      </div>

  <div class="field field--name-field-sdk field--type-entity-reference field--label-visually_hidden">
    <div class="field--label sr-only">SDK</div>
          <div class="field--items">
              <div class="field--item">Android</div>
          <div class="field--item">iOS</div>
          <div class="field--item">tvOS</div>
              </div>
      </div>

</div>

  <div class="group-fourth-row">
  
            <div class="field field--name-field-support-doc-body field--type-text-with-summary field--label-hidden field--item"><p>In this topic, you will learn how to append advertising query parameters to your VMAP URLs with the Brightcove Native Player SDKs.
</p><article class="bcls-article"><section class="bcls-section"><h2 id="Overview">Overview</h2>

<p>Even though the Native player SDKs do not perform client-side macro replacement, you can manually append query string parameters for ad targeting. This can be done for either client-side or server-side ads.</p>

<p>To learn more about URL parameters, see the <a href="video-cloud-ssai-ad-config-api.html#Ad_variables">Ad Variables</a> section of the Video Cloud SSAI Ad Config API document.</p>
</section><section class="bcls-section"><h2 id="Client_side_ads">Client-side ads</h2>

<p>To provide custom values through URL parameters appended to the VMAP URL, follow these steps:</p>

<ol class="bcls-tasklist"><li>
	<p>Start with one of the client-side code samples for IMA advertising with the Brightcove Native SDKs:</p>

	<ul><li><a href="https://github.com/BrightcoveOS/android-player-samples/tree/master/brightcove-exoplayer">Android player samples</a></li>
		<li><a href="https://github.com/BrightcoveOS/ios-player-samples">iOS player samples</a></li>
	</ul></li>
	<li>
	<p>Append the URL query parameters to the VMAP URL before calling the IMA plugin. This can be done before the following methods:</p>

	<p><strong>Android</strong></p>

	<pre>
<code class="notranslate language-java">adsRequest.setAdTagUrl(adRulesURL);</code></pre>

	<p> </p>
	<strong>iOS</strong>

	<pre>
<code class="notranslate language-objectivec">for video in mutablePlaylist.videos {
  if let _video = video as? BCOVMutableVideo {
     _video.properties[kBCOVIMAAdTag] = IMAConfig.VMAPResponseAdTag
    updatedVideos.append(_video)
  }
}</code></pre>
	</li>
</ol></section><section class="bcls-section"><h2 id="Server_side_ads">Server-side ads</h2>

<p>To provide custom values through URL parameters appended to the VMAP URL, follow these steps:</p>

<ol class="bcls-tasklist__restart"><li>
	<p>With an SSAI ad configuration id, retrieve a video object from the Brightcove catalog (Playback API). Learn how to create an ad configuration with the <a href="implementing-server-side-ads-native-player-sdks.html#Create_an_ad_configuration">Implementing Server-Side Ads with the Native Player SDKs</a> document.</p>

	<p>A sample ad configuration looks like this:</p>

	<pre class="line-numbers">
<code class="notranslate language-java">{
  "name": "SSAI VMAP Ad Server",
  "vmap_response_namespace": "bc",
  "config_id": "<span class="bcls-input">your ad config Id</span>",
  "account_id": "1752604059001",
  "created_timestamp": "2017-10-24T20:21:55.106488973Z",
  "updated_timestamp": "2017-10-26T14:26:22.161791419Z",
  "ad_config": {
  	"enable_ads": true,
  	"expected_ad_response": "dfp_vmap",
  	"proxy_beacons_enabled": false,
  	"template_url": {
  		"template": "https://solutions.brightcove.com/bcls/brightcove-player/vmap/simple-vmap.xml"
  	}
  }
}</code></pre>

	<aside class="bcls-aside bcls-aside--tip">The <code class="notranslate">template_url</code> property contains the ad URL.</aside></li>
	<li>
	<p>In the jsonResponse from the call to the Playback API, examine the sources for the video object. Each source object will contain a VMAP property and a VMAP URL. Select and extract the VMAP URL.</p>

	<pre>
<code class="notranslate language-java">http://ssaiplayback.prod.boltdns.net/playback/once/v1/vmap/hls/v3/clear/3981276734001/
  b871a6b8-4b3e-4787-b176-aed923287d5a/477b1308-fc18-47a6-bb99-6cb9e2ff2040/
  content.vmap<span class="bcls-highlight">?bc_token=XXX</span></code></pre>

	<aside class="bcls-aside bcls-aside--tip">The only URL parameter on the VMAP URL will be the <code class="notranslate">bc_token</code>.</aside></li>
	<li>
	<p>Let’s say your ad URL looks like this:</p>

	<pre>
<code class="notranslate language-java">https://myad.com/ads?rule={{url.rule}}&amp;id={{url.video.id}}</code></pre>

	<p>If your ad URL has the above ad macros, then you will add these query parameters to the VMAP URLs with the appropriate values.</p>
	</li>
	<li>
	<p>Append query parameters to the VMAP URL. In this example, the <code class="notranslate">{{url.rule}}</code> macro in the ad url is replaced with the value <code class="notranslate">discos-enabled</code>, and the <code class="notranslate">{{url.video_id}}</code> macro is replaced with the video id value.</p>

	<pre>
<code class="notranslate language-java">http://ssaiplayback.prod.boltdns.net/playback/once/v1/vmap/hls/v3/clear/3981276734001/
b871a6b8-4b3e-4787-b176-aed923287d5a/477b1308-fc18-47a6-bb99-6cb9e2ff2040/
content.vmap<span class="bcls-highlight">?bc_token=XXX&amp;rule=discos-enabled&amp;video_id=5625751316001</span></code></pre>
	</li>
	<li>Process the video with the SSAI plugin.</li>
	<li>
	<p>For development details, see the following:</p>

	<ul><li><a href="#Android_implementation">Android implementation</a></li>
		<li><a href="#iOS_implementation">iOS implementation</a></li>
	</ul></li>
</ol><h3 id="Android_implementation">Android implementation</h3>

<p>From the Playback API response, you can extract the appropriate VMAP source URL and append your query parameters. To do this, follow these steps:</p>

<ol class="bcls-tasklist__restart"><li>With an SSAI ad configuration id, retrieve a video object from the Brightcove catalog (Playback API). For details, see the <a href="implementing-server-side-ads-native-player-sdks.html#Android_implementation">Android implementation</a> section of the Implementing Server-Side Ads with the Native Player SDKs document.</li>
	<li>
	<p>From the video object, select and extract the appropriate VMAP URL. Retrieve the default source using the <a href="https://docs.brightcove.com/android-sdk/javadoc/com/brightcove/ssai/controller/SSAISourceSelector.html">SSAISourceSelector</a> object. The source object returned will have these properties:</p>

	<pre>
<code class="notranslate language-java">source.getProperties().get(Source.Fields.VMAP);</code></pre>
	</li>
	<li>Append query parameters to the VMAP URL.</li>
	<li>
	<p>Process the modified URL with the Once UX plugin as follows:</p>

	<pre>
<code class="notranslate language-java">plugin.processVideo(videoUrlString);</code></pre>
	</li>
</ol><!-- <p>
  Alternatively, you can select and extract the appropriate manifest URL as follows:
</p>
<pre><code class="notranslate language-java">source.getProperties().get(Source.Fields.URL);</code></pre>
<p>
  Once you append query parameters to the manifest URL, you can create the Video object and add it to the VideoView.
</p> --><!-- <h3 id="Android_MainActivity_file" class="bcls-expander-head">Android MainActivity file</h3>
<div class="bcls-expander-content">
<p>Your <strong>MainActivity.java</strong> file should look similar to this:</p>

<pre class="line-numbers">
<code class="notranslate language-java">package com.brightcove.player.samples.onceux.basic;

import android.os.Bundle;

}</code></pre>
</div>
&nbsp; --><h3 id="iOS_implementation">iOS implementation</h3>

<p>From the Playback API response, you can extract the appropriate VMAP source URL and append your query parameters. To do this, follow these steps:</p>

<ol class="bcls-tasklist__restart"><li>With an SSAI ad configuration id, retrieve a video object from the Brightcove catalog (Playback API). For details, see the <a href="implementing-server-side-ads-native-player-sdks.html#iOS_implementation">iOS implementation</a> section of the Implementing Server-Side Ads with the Native Player SDKs document.</li>
	<li>
	<p>From the video object, select and extract the appropriate manifest or VMAP URL. From the playback service response, the jsonResponse (NSDictionary) contains the <a href="https://docs.brightcove.com/ios-sdk/Classes/BCOVVideo.html">BCOVVideo</a> object, which includes the sources which hold the URL to the VMAP document. Your code may look similar to this:</p>

	<pre>
<code class="notranslate language-java">// Create a mutable version of the jsonResponse NSDictionary object
NSURLComponents *components = [[NSURLComponents alloc] init];
NSMutableDictionary *videoPropertiesDictionary = [[NSMutableDictionary alloc] init];
NSMutableArray *updatedSources = [[NSMutableArray alloc] init];

// Define the URL parameters that will be added to the VMAP URL
NSURLQueryItem *queryItemEntrypointUrlParameter = [NSURLQueryItem queryItemWithName:@"rule" value:@"discos-enabled"];
NSURLQueryItem *queryItemVideoId = [NSURLQueryItem queryItemWithName:@"video_id" value:jsonResponse[@"id"]];

//deserialize the video and store in dictionary
[videoPropertiesDictionary addEntriesFromDictionary:jsonResponse];</code></pre>
	</li>
	<li>
	<p>Append query parameters to the VMAP URL.</p>

	<pre class="line-numbers">
<code class="notranslate language-java">// For each source, update each VMAP URL stored in the jsonResponse NSDictionary object and assemble the NSURLQueryItem. Store it in the mutable version of the jsonResponse NSDictionary object.
for (NSDictionary *source in videoPropertiesDictionary[@"sources"])
{
    NSMutableDictionary *mutableSource = [[NSMutableDictionary alloc] init];
    [mutableSource addEntriesFromDictionary:source];

    NSString *vmapURL = mutableSource[@"vmap"];
    components = [NSURLComponents componentsWithString:vmapURL];

    NSArray *queryItemsArray = components.queryItems;
    NSURLQueryItem *bctoken = [queryItemsArray firstObject];
    components.queryItems = @[bctoken, queryItemEntrypointUrlParameter, queryItemVideoId ];
    mutableSource[@"vmap"] = components.URL.absoluteString;

    [updatedSources addObject:mutableSource];
}</code></pre>
	</li>
	<li>
	<p>Process the modified URL with the SSAI plugin as follows:</p>

	<pre class="line-numbers">
<code class="notranslate language-java">videoPropertiesDictionary[@"sources"] = updatedSources;
// Create a new video object with the updated jsonResponse NSDictionary object
BCOVVideo *video = [BCOVPlaybackService videoFromJSONDictionary:videoPropertiesDictionary];
// Setting this video object to the BCOVPlaybackController will call the new vmap URL (with the URL parameters appended) when playback starts.
[self.controller setVideos:@[video]];</code></pre>
	<!-- <p>For a complete code example, expand the <strong>iOS ViewController using Objective-C</strong> section below.</p> --></li>
</ol><!-- <h3 id="iOS_ViewController_using_Objective-C" class="bcls-expander-head">iOS ViewController using Objective-C</h3>

<div class="bcls-expander-content">
<p>Your <strong>ViewController.m</strong> file should look similar to this:</p>

<pre class="line-numbers">
<code class="notranslate language-objectivec">//
//  ViewController.m
//  SSAI Params
//
//  Copyright © 2018 Brightcove. All rights reserved.
//

#import "ViewController.h"

@import BrightcovePlayerSDK;
@import BrightcoveOUX;

// ** Customize these values with your own account information **
NSString *accountId = @"<span class="bcls-input">your account Id</span>";
NSString *policyKey = @"<span class="bcls-input">your policy key</span>";
NSString *videoId = @"<span class="bcls-input">your video Id</span>";
NSString *adConfigId = @"<span class="bcls-input">your ad configuration Id</span>";

@interface ViewController () &lt;BCOVPlaybackControllerDelegate&gt;

@property (nonatomic, strong) id&lt;BCOVPlaybackController&gt; playbackController;
@property (nonatomic, strong) BCOVPlaybackService *playbackService;
@property (nonatomic) BCOVPUIPlayerView *playerView;
@property (weak, nonatomic) IBOutlet UIView *videoContainerView;
@property (weak, nonatomic) IBOutlet UIView *companionSlotContainerView;
@property(copy) NSArray&lt;NSURLQueryItem *&gt; *queryItems;

@end

@implementation ViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view, typically from a nib.

    BCOVPlayerSDKManager *manager = [BCOVPlayerSDKManager sharedManager];

    // Create a companion slot.
    BCOVOUXCompanionSlot *companionSlot = [[BCOVOUXCompanionSlot alloc] initWithView:self.companionSlotContainerView width:500 height:61];

    // In order to display an ad progress banner on the top of the view, we create this display container.  This object is also responsible for populating the companion slots.
    BCOVOUXAdComponentDisplayContainer *adComponentDisplayContainer = [[BCOVOUXAdComponentDisplayContainer alloc] initWithCompanionSlots:@[companionSlot]];

    self.controller = [manager createOUXPlaybackControllerWithViewStrategy:nil];

    // In order for the ad display container to receive ad information, we add it as a session consumer.
    [self.controller addSessionConsumer:adComponentDisplayContainer];

    self.controller.delegate = self;
    self.controller.autoPlay = YES;
    self.controller.autoAdvance = YES;

    BCOVPUIBasicControlView *controlView = [BCOVPUIBasicControlView basicControlViewWithVODLayout];
    // Set playback controller later.
    self.playerView = [[BCOVPUIPlayerView alloc] initWithPlaybackController:nil options:nil controlsView:controlView];

    [self.videoContainerView addSubview:self.playerView];
    self.playerView.translatesAutoresizingMaskIntoConstraints = NO;
    [NSLayoutConstraint activateConstraints:@[
        [self.playerView.topAnchor constraintEqualToAnchor:self.videoContainerView.topAnchor],
        [self.playerView.rightAnchor constraintEqualToAnchor:self.videoContainerView.rightAnchor],
        [self.playerView.leftAnchor constraintEqualToAnchor:self.videoContainerView.leftAnchor],
        [self.playerView.bottomAnchor constraintEqualToAnchor:self.videoContainerView.bottomAnchor],
    ]];

    self.playerView.playbackController = self.controller;

    _playbackService = [[BCOVPlaybackService alloc]
                        initWithAccountId:accountId
                        policyKey:policyKey];

    [self requestContentFromPlaybackService];
}

- (void)requestContentFromPlaybackService
{
	// Set your SSAI ad configuration id as a query parameter
  NSDictionary *queryParameters = @{
                                    @"ad_config_id" : kViewControllerAdConfigID
                                    };
  // Retrieve a video from the Playback API using a video Id and your ad config Id
  [self.playbackService findVideoWithVideoID:videoId parameters:queryParameters completion:^(BCOVVideo *video, NSDictionary *jsonResponse, NSError *error) {

    if (video)
    {
      // Create a mutable version of the jsonResponse NSDictionary object
      NSURLComponents *components = [[NSURLComponents alloc] init];
      NSMutableDictionary *videoPropertiesDictionary = [[NSMutableDictionary alloc] init];
      NSMutableArray *updatedSources = [[NSMutableArray alloc] init];

			// Define the URL parameters that will be added to the VMAP URL
      NSURLQueryItem *queryItemEntrypointUrlParameter = [NSURLQueryItem queryItemWithName:@"rule" value:@"discos-enabled"];
      NSURLQueryItem *queryItemVideoId = [NSURLQueryItem queryItemWithName:@"video_id" value:jsonResponse[@"id"]];

      //deserialize the video and store in dictionary
      [videoPropertiesDictionary addEntriesFromDictionary:jsonResponse];

      // For each source, update each VMAP URL stored in the jsonResponse NSDictionary object
      // and assemble the NSURLQueryItem. Store it in the mutable version of the jsonResponse NSDictionary object.
      for (NSDictionary *source in videoPropertiesDictionary[@"sources"])
      {
        NSMutableDictionary *mutableSource = [[NSMutableDictionary alloc] init];
        [mutableSource addEntriesFromDictionary:source];

        NSString *vmapURL = mutableSource[@"vmap"];
        components = [NSURLComponents componentsWithString:vmapURL];

        NSArray *queryItemsArray = components.queryItems;
        NSURLQueryItem *bctoken = [queryItemsArray firstObject];
        components.queryItems = @[bctoken, queryItemEntrypointUrlParameter, queryItemVideoId ];
        mutableSource[@"vmap"] = components.URL.absoluteString;

        [updatedSources addObject:mutableSource];
      }
      videoPropertiesDictionary[@"sources"] = updatedSources;
      // Create a new video object with the updated jsonResponse NSDictionary object
      BCOVVideo *video = [BCOVPlaybackService videoFromJSONDictionary:videoPropertiesDictionary];
      // Setting this video object to the BCOVPlaybackController will call the new vmap URL
      // (with the URL parameters appended) when playback starts.
      [self.controller setVideos:@[video]];
    }
    else
    {
      NSLog(@"ViewController Debug - Error retrieving video playlist: `%@`", error);
    }

  }];
}

@end</code></pre>
</div> --></section></article></div>
      
</div>

</div>


<section class="views-element-container block block-views block-views-blockrelated-content-by-field-block-1 clearfix" id="block-views-block-related-content-by-field-block-1">
  
    

      <div class="form-group"><div class="view view-related-content-by-field view-id-related_content_by_field view-display-id-block_1 js-view-dom-id-5a2d9ff8cd5195a76193f90b5dac60743228cbfc64e189470f3be09e4e550204">
  
    
      <div class="view-header">
      <h2>Related content</h2>
    </div>
      
      <div class="view-content">
      <div class="item-list">
  
  <ul>

          <li><div class="views-field views-field-title"><span class="field-content"><span class="content-type-support_doc"><a href="implementing-server-side-ads-native-player-sdks.html" hreflang="en">Implementing Server-Side Ads with the Native Player SDKs</a></span></span></div></li>
          <li><div class="views-field views-field-title"><span class="field-content"><span class="content-type-support_doc"><a href="video-cloud-ssai-overview.html" hreflang="en">Video Cloud SSAI Overview</a></span></span></div></li>
          <li><div class="views-field views-field-title"><span class="field-content"><span class="content-type-support_doc"><a href="video-cloud-ssai-ad-config-api.html" hreflang="en">Video Cloud SSAI Ad Config API</a></span></span></div></li>
          <li><div class="views-field views-field-title"><span class="field-content"><span class="content-type-support_doc"><a href="video-cloud-ssai-ad-tag-validation.html" hreflang="en">Video Cloud SSAI Ad Tag Validation</a></span></span></div></li>
          <li><div class="views-field views-field-title"><span class="field-content"><span class="content-type-support_doc"><a href="overview-playback-api.html" hreflang="en">Overview: Playback API</a></span></span></div></li>
          <li><div class="views-field views-field-title"><span class="field-content"><span class="content-type-support_doc"><a href="implementing-server-side-ads-brightcove-player.html" hreflang="en">Implementing Server-Side Ads with the Brightcove Player</a></span></span></div></li>
    
  </ul>

</div>

    </div>
  
          </div>
</div>

  </section>


  </div>

              </section>

                </div>
  </div>

      
  
  </div>

    
    <script type="application/json" data-drupal-selector="drupal-settings-json">{"path":{"baseUrl":"\/","scriptPath":null,"pathPrefix":"","currentPath":"node\/18677","currentPathIsAdmin":false,"isFront":false,"currentLanguage":"en"},"pluralDelimiter":"\u0003","google_analytics":{"trackOutbound":true,"trackMailto":true,"trackDownload":true,"trackDownloadExtensions":"7z|aac|arc|arj|asf|asx|avi|bin|csv|doc(x|m)?|dot(x|m)?|exe|flv|gif|gz|gzip|hqx|jar|jpe?g|js|mp(2|3|4|e?g)|mov(ie)?|msi|msp|pdf|phps|png|ppt(x|m)?|pot(x|m)?|pps(x|m)?|ppam|sld(x|m)?|thmx|qtm?|ra(m|r)?|sea|sit|tar|tgz|torrent|txt|wav|wma|wmv|wpd|xls(x|m|b)?|xlt(x|m)|xlam|xml|z|zip"},"bootstrap":{"forms_has_error_value_toggle":1,"modal_animation":1,"modal_backdrop":"true","modal_focus_input":1,"modal_keyboard":1,"modal_select_text":1,"modal_show":1,"modal_size":"","popover_enabled":1,"popover_animation":1,"popover_auto_close":1,"popover_container":"body","popover_content":"","popover_delay":"0","popover_html":0,"popover_placement":"right","popover_selector":"","popover_title":"","popover_trigger":"click"},"ajaxTrustedUrl":{"form_action_p_pvdeGsVG5zNF_XLGPTvYSKCf43t8qZYSwcfZl2uzM":true},"user":{"uid":0,"permissionsHash":"3b7fdb4927baca3ee2939edeb777485b3e2c2d36cf8c80e0d8f49c6dc5e2eeca"}}</script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@3.4.1/dist/js/bootstrap.min.js" integrity="sha256-nuL8/2cJ5NDSSwnKD8VqreErSWHtnEP9E7AySL+1ev4=" crossorigin="anonymous"></script>

  <script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"beacon":"bam.nr-data.net","licenseKey":"e78a80aa93","applicationID":"129613202","transactionName":"YwBUZkcFVktUWhJQX1pKd1FBDVdWGn0UTEBVCWpxWhZdZHNWFFRscgpEX3cRUVRRXBQUDkYAWFZQFmhUVFoDUV9YAVNAcwtKVXRaElBfWg==","queueTime":0,"applicationTime":259,"atts":"T0dXEA8fRUU=","errorBeacon":"bam.nr-data.net","agent":""}</script></body>
</html>
